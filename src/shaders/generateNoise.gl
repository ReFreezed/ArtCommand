/***************************************************************
*
*  Generator: Simplex noise
*
*---------------------------------------------------------------
*
*  Art Command
*  by Marcus 'ReFreezed' Thunstr√∂m
*
***************************************************************/

// #include "_noise2D"
#include "_noise3D"
// #include "_noise4D"

#include "_colorTexture"
#include "_mask"
#include "_utils"

uniform bool clouds;
uniform vec3 offset;
uniform vec2 scale;
uniform vec4 gradientColor;

vec4 effect(vec4 loveColor, Image tex, vec2 texUv, vec2 screenPos) {
	vec2 pos = (screenPos + offset.xy) / scale;
	float v  = 0;

	if (clouds) {
		const int   layers     = 12;
		const float posMulInit = .005;
		const float posMulAdd  = .003 * sqrt(2.);
		const float weightMul  = .8;

		float posMul    = posMulInit;
		float weightSum = 0;
		float weight    = 1;

		for (int layer = 0; layer < layers; layer++) {
			v         += weight * snoise(vec3(posMul*pos+.171*layer*layer, 1.1453*layer));
			weightSum += weight;

			posMul  = posMul + posMulAdd;
			weight *= weightMul;
		}
		v = .5 + .5*v/weightSum;

	} else {
		// v = .5 + .5*snoise(pos); // 2D
		v = .5 + .5*snoise(vec3(pos, offset.z)); // 3D
		// v = .5 + .5*snoise(vec4(pos, offset.z, .5315)); // 4D
	}

	vec4 sample;

	if (useColorTexture) {
		float inset = .5 / gradientSize;
		sample = colorTextureTexel(vec2(inset+v*(1-2*inset), 0));
	} else {
		sample = vec4(v*gradientColor.rgb, gradientColor.a);
	}

	return remapChannels(applyMaskStuff(sample, screenPos));
}
