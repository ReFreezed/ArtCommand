/***************************************************************
*
*  Effect: Replace color
*
*---------------------------------------------------------------
*
*  Art Command
*  by Marcus 'ReFreezed' Thunstr√∂m
*
***************************************************************/

#include "_colorSpaces.gl"
#include "_main.gl"

uniform vec3 target; // {r,g,b}
uniform vec2 params; // {reach, ramp}

#define REACH params.x
#define RAMP  params.y

#define H x
#define S y
#define L z

#define TAU 6.283185307179586

vec4 effect(vec4 loveColor, Image tex, vec2 texUv, vec2 screenPos) {
	vec4 pixel  = Texel(tex, texUv);
	pixel.rgb  /= pixel.a;

	vec3 pixelHsl  = toHsl(pixel.rgb);
	vec3 targetHsl = toHsl(target);
	// return vec4(vec3(pixelHsl.H), 1); // DEBUG

	float pixelChroma  = pixelHsl .S * (1 - abs(pixelHsl .L-.5) * 2);
	float targetChroma = targetHsl.S * (1 - abs(targetHsl.L-.5) * 2);
	// return vec4(vec3(pixelChroma), 1); // DEBUG

	vec3 pixelBiconePos  = vec3(pixelChroma *cos(pixelHsl .H*TAU), pixelChroma *sin(pixelHsl .H*TAU), pixelHsl .L*2);
	vec3 targetBiconePos = vec3(targetChroma*cos(targetHsl.H*TAU), targetChroma*sin(targetHsl.H*TAU), targetHsl.L*2);

	float distChroma    = distance(pixelBiconePos.xy, targetBiconePos.xy);
	float distLightness = distance(pixelBiconePos.z , targetBiconePos.z );
	// return vec4(vec3(1-distChroma), 1); // DEBUG
	// return vec4(vec3(1-distLightness), 1); // DEBUG

	// float dist = max(distChroma, distLightness); // Less smooth, farther reaching, but perhaps more exact.
	float dist = 1 - (1-distChroma) * (1-distLightness); // Smoother.
	// return vec4(vec3(1-dist), 1); // DEBUG

	float k     = pow(clamp(dist/REACH, 0, 1), RAMP);
	vec4 color  = applyMainEffect(vec4(1), texUv, loveColor);
	vec4 result = vec4(mix(color.rgb, pixel.rgb, vec3(k)), 1);

	result.rgb = clamp(result.rgb, vec3(0), vec3(1)) * result.a;
	return result;
}
